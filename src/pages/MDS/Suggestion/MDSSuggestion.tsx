import { Bot } from 'lucide-react';
import { Tooltip } from 'react-tooltip';
import { CaretRight } from '@phosphor-icons/react';
import { MDSFinal } from '../../../types/MDSFinal.ts';
import {
  Disclosure,
  DisclosureButton,
  DisclosurePanel,
} from '@headlessui/react';
import { Row } from '@tanstack/react-table';
import NTATable from './NTATable/NTATable.tsx';
import SLPTable from './SLPTable/SLPTable.tsx';

export default function MDSSuggestion({ row }: { row: Row<MDSFinal> }) {
  const nta_count = row.original.nta_final_entry
    .flatMap((d) => d.new_icd10)
    .flatMap((d) => d?.progress_note)
    .reduce((acc: { [key: string]: number }, item) => {
      if (!item || !item.source_category) return acc;
      acc[item.source_category] = (acc[item.source_category] || 0) + 1;
      return acc;
    }, {});
  const slp_count = row.original.slp_final_entry
    .flatMap((d) => {
      if (d.condition === 'Comorbidities Present') {
        return d.slp_entry
          ?.flatMap((d) => d.new_icd10)
          .flatMap((d) => d?.progress_note);
      }
      return d.slp_entry;
    })
    .reduce((acc: { [key: string]: number }, item) => {
      if (!item || !item.source_category) return acc;
      acc[item.source_category] = (acc[item.source_category] || 0) + 1;
      return acc;
    }, {});

  return (
    <div className="flex flex-col gap-3 py-4 px-3 w-full ">
      <div className="flex items-center gap-2">
        <h3 className="text-base font-semibold underline">Suggestions</h3>
        <Bot
          data-tooltip-id="bot-tooltip"
          data-tooltip-content="Suggestions generated by AI from Progress Note"
          className="size-6 focus:outline-none"
        />
      </div>
      <Tooltip id="bot-tooltip" className="z-99" />
      <div className="flex flex-col">
        <Disclosure defaultOpen={true}>
          <DisclosureButton className="group">
            <div className="flex items-center py-2 gap-2 hover:bg-[#E6F3FF] ">
              <CaretRight className="ease-in-out transition-all duration-200  group-data-[open]:rotate-90" />
              <h3 className="text-base font-semibold">NTA</h3>
              <span className="text-sm text-gray-600">
                {((): string => {
                  const parts = [];
                  if (nta_count.P > 1) {
                    parts.push(`${nta_count.P} Progress Notes`);
                  }
                  if (nta_count.P === 1) {
                    parts.push(`${nta_count.P} Progress Note`);
                  }
                  if (nta_count.D > 1) {
                    parts.push(`${nta_count.D} Diagnoses`);
                  }
                  if (nta_count.D === 1) {
                    parts.push(`${nta_count.D} Diagnosis`);
                  }
                  return parts.length > 0
                    ? `(${parts.join(' and ')} Detected)`
                    : '';
                })()}
              </span>
            </div>
          </DisclosureButton>
          <DisclosurePanel
            transition
            className="origin-top transition duration-200 ease-out data-[closed]:-translate-y-3 data-[closed]:opacity-0"
          >
            <NTATable data={row.original.nta_final_entry} />
          </DisclosurePanel>
        </Disclosure>
        <Disclosure>
          <DisclosureButton className="group ">
            <div className="flex items-center py-2 gap-2 hover:bg-[#E6F3FF] ">
              <CaretRight className="ease-in-out transition-all duration-200  group-data-[open]:rotate-90" />
              <h3 className="text-base font-semibold">SLP</h3>
              <span className="text-sm text-gray-600">
                {((): string => {
                  const parts = [];
                  if (slp_count.P > 1) {
                    parts.push(`${slp_count.P} Progress Notes`);
                  }
                  if (slp_count.P === 1) {
                    parts.push(`${slp_count.P} Progress Note`);
                  }
                  if (slp_count.D > 1) {
                    parts.push(`${slp_count.D} Diagnoses`);
                  }
                  if (slp_count.D === 1) {
                    parts.push(`${slp_count.D} Diagnosis`);
                  }
                  if (slp_count.PO > 1) {
                    parts.push(`${slp_count.PO} Orders`);
                  }
                  if (slp_count.PO === 1) {
                    parts.push(`${slp_count.PO} Order`);
                  }
                  return parts.length > 0
                    ? `(${parts.join(' and ')} Detected)`
                    : '';
                })()}
              </span>
            </div>
          </DisclosureButton>
          <DisclosurePanel
            transition
            className="origin-top transition duration-200 ease-out data-[closed]:-translate-y-3 data-[closed]:opacity-0"
          >
            <SLPTable data={row.original.slp_final_entry} />
          </DisclosurePanel>
        </Disclosure>
      </div>
    </div>
  );
}
