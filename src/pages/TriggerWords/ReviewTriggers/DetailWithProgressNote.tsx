import { Bot } from 'lucide-react';
import { Tooltip } from 'react-tooltip';
import { ThumbsUp } from '@phosphor-icons/react';
import CommentModal from './CommentModal.tsx';
import HyperLink from '../../../components/Basic/HyerLink.tsx';
import { Row, TableState } from '@tanstack/react-table';
import { TriggerFinal } from '../../../types/TriggerFinal.ts';
import { useQueryClient } from '@tanstack/react-query';
import usePutComment from '../../../hooks/interface/usePutComment.ts';
import { useContext, useState } from 'react';
import { AuthContext } from '../../../components/AuthWrapper.tsx';
import clsx from 'clsx';
import HighlightWrapper from '../../../components/Basic/HighlightWrapper.tsx';
import LineClampShowMore from '../../../common/LineClampShowMore.tsx';

export default function DetailWithProgressNote({
  row,
  tableState,
}: {
  row: Row<TriggerFinal>;
  tableState: TableState;
}) {
  const { route } = useContext(AuthContext);
  const queryClient = useQueryClient();
  const putComment = usePutComment(route, queryClient);

  return (
    <div className="bg-slate-50 dark:bg-slate-900 px-4 text-sm py-4 flex flex-col gap-4.5">
      <table className="basis-full pb-3 border-stroke border-b border-spacing-y-2.5 border-separate">
        <thead>
          <tr>
            <th className="text-left w-2/12">
              <div className="flex gap-1.5">
                <p>Trigger</p>
                <Bot
                  data-tooltip-id="bot-tooltip"
                  data-tooltip-content="Trigger generated by AI from Progress Note"
                  className="size-5 block focus:outline-none"
                />
                <Tooltip id="bot-tooltip" className="z-99" />
              </div>
            </th>
            <th
              className={clsx(
                'text-left pr-10 ',
                row.original.upstream === 'PCC' ? 'w-8/12' : 'w-6/12',
              )}
            >
              <div className="flex gap-1.5">
                <p>Explanations</p>
                <Bot
                  data-tooltip-id="bot-tooltip"
                  data-tooltip-content="Explanation generated by AI from Progress Note"
                  className="size-5 block focus:outline-none"
                />
                <Tooltip id="bot-tooltip" className="z-99" />
              </div>
            </th>
            <th className="text-left  w-2/12">
              <p>Review</p>
            </th>
            {row.original.upstream !== 'PCC' && (
              <th className="text-left w-2/12">
                <p>Actions</p>
              </th>
            )}
          </tr>
        </thead>
        <tbody>
          {row.original.trigger_words.map(
            ({ trigger_word, is_thumb_up, summary, comment, event_ids }) => {
              const [isthumbup, setThumbup] = useState(is_thumb_up || false);
              const [commentState, setCommentState] = useState(comment || null);
              return (
                <tr key={row.id + trigger_word}>
                  <td className="whitespace-nowrap align-top flex items-center flex-nowrap">
                    <HighlightWrapper
                      text={trigger_word || ''}
                      searchTerm={tableState.globalFilter || ''}
                    />
                  </td>
                  <td className="pr-10">
                    <LineClampShowMore className="whitespace-pre-line">
                      <HighlightWrapper
                        text={summary || ''}
                        searchTerm={tableState.globalFilter || ''}
                      />
                    </LineClampShowMore>
                  </td>
                  <td className=" align-top	">
                    <div className=" flex items-center flex-nowrap gap-2">
                      {isthumbup ? (
                        <ThumbsUp
                          className="size-4 text-meta-3 cursor-pointer thumbs_up"
                          weight="fill"
                        />
                      ) : (
                        <ThumbsUp
                          className="size-4 cursor-pointer thumbs_up"
                          onClick={() => {
                            setThumbup(true);
                            putComment.mutate({
                              progress_note_id: row.original.progress_note_id,
                              trigger_word: trigger_word || '',
                              comment: '',
                              is_thumb_up: true,
                            });
                          }}
                        />
                      )}
                      {!isthumbup && commentState !== null ? (
                        <CommentModal
                          data={{
                            comment: commentState || '',
                            trigger_word: trigger_word || '',
                            progress_note_id: row.original.progress_note_id,
                          }}
                          active={true}
                          setThumbUp={setThumbup}
                          setCommentState={setCommentState}
                        />
                      ) : (
                        <CommentModal
                          data={{
                            comment: commentState || '',
                            trigger_word: trigger_word || '',
                            progress_note_id: row.original.progress_note_id,
                          }}
                          setThumbUp={setThumbup}
                          setCommentState={setCommentState}
                          active={false}
                        />
                      )}
                    </div>
                  </td>
                  {row.original.upstream !== 'PCC' && (
                    <td className="align-top ">
                      {event_ids && event_ids.length > 0 ? (
                        event_ids.map((event_id) => (
                          <HyperLink
                            key={event_id}
                            className="action_link"
                            href={`https://clearviewhcm.matrixcare.com/Zion?zionpagealias=EVENTVIEW&NSPID=${row.original.patient_id}&CHGPID=true&EVENTID=${event_id}&dashboardHomePage=true&OEType=Event&PATIENTID=${row.original.patient_id}`}
                          >
                            View the Event
                          </HyperLink>
                        ))
                      ) : trigger_word === 'Fall' ? (
                        <HyperLink
                          className="action_link"
                          tooltip_content={'Create an Event in MatrixCare'}
                          href={`https://clearviewhcm.matrixcare.com/Zion?zionpagealias=EVENTCREATE&PATIENTID=${row.original.patient_id}&formId=944&categoryName=Safety%20Events&formDescription=Post+Fall+Event+v3`}
                        >
                          Create Event
                        </HyperLink>
                      ) : trigger_word === 'Wound/Ulcer' ? (
                        <HyperLink
                          tooltip_content={'Create an Event in MatrixCare'}
                          className="action_link"
                          href={`https://clearviewhcm.matrixcare.com/Zion?zionpagealias=EVENTCREATE&PATIENTID=${row.original.patient_id}&formId=948&categoryName=Skin%20Integrity%20Events&formDescription=Wound+Other+Event`}
                        >
                          Create Event
                        </HyperLink>
                      ) : trigger_word === 'Weight Change' ? (
                        <p></p>
                      ) : (
                        <HyperLink
                          tooltip_content={'Create an Event in MatrixCare'}
                          className="action_link"
                          href={`https://clearviewhcm.matrixcare.com/Zion?zionpagealias=EVENTCREATE&PATIENTID=${row.original.patient_id}`}
                        >
                          Create Event
                        </HyperLink>
                      )}
                    </td>
                  )}
                </tr>
              );
            },
          )}
        </tbody>
      </table>
      <table className="pb-3 border-stroke border-spacing-y-2.5 border-separate">
        <thead>
          <tr>
            <th className="text-left w-2/12">Progress Note ID</th>
            <th className="text-left w-6/12">Progress Note</th>
            <th className="text-left w-2/12">Created By</th>
            <th className="text-left w-2/12">Created Date</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className="align-top whitespace-nowrap">
              {row.getValue('progress_note_id')}
            </td>
            <td className="pr-10">
              <LineClampShowMore className="whitespace-pre-line">
                <HighlightWrapper
                  text={row.getValue('progress_note') || ''}
                  searchTerm={tableState.globalFilter || ''}
                />
              </LineClampShowMore>
            </td>
            <td className="align-top whitespace-nowrap">
              {row.getValue('created_by')}
            </td>
            <td className=" whitespace-nowrap align-top">
              {new Date(row.getValue('created_date')).toLocaleDateString()}{' '}
              {new Date(row.getValue('created_date')).toLocaleTimeString(
                navigator.language,
                {
                  hour: '2-digit',
                  minute: '2-digit',
                },
              )}
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}
